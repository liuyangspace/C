int printf (const char *format, ...);

format的格式如下：
    %[flags][width][.prec][F|N|h|l]type

type的字符用于规定输出数据的类型，含义如下：
    字符	    对应数据类型	含义
    d / i	    int	            接受整数值并将它表示为有符号的十进制整数，i是老式写法
    o	        unsigned int	无符号8进制整数(不输出前缀0）
    u           unsigned int	无符号10进制整数
    x / X       unsigned int	无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF（不输出前缀0x)
    f(lf)       float(double)	单精度浮点数用f,双精度浮点数用lf(尤其scanf不能混用)
    e / E       double	        科学计数法表示的数，此处"e"的大小写代表在输出时用的“e”的大小写
    g / G       double	        有效位数，如：%.8g表示单精度浮点数保留8位有效数字。双精度用lg
    c           char	        字符型。可以把输入的数字按照ASCII码相应转换为对应的字符
    s / S       char * / wchar_t *	字符串。输出字符串中的字符直至字符串中的空字符（字符串以'\0‘结尾，这个'\0'即空字符）
    p           void *	        以16进制形式输出指针
    n	        int *	        到此字符之前为止，一共输出的字符个数，不输出文本
    %           无输入          不进行转换，输出字符‘%’（百分号）本身
    m	        无	            打印errno值对应的出错内容,(例: printf("%m\n"); )

flags 规定输出样式，取值和含义如下：
    字符        字符名称	    说明
    -	        减号	        左对齐，右边填充空格(默认右对齐)
    +           加号	        在数字前增加符号 + 或 -
    0           数字零	        将输出的前面补上0，直到占满指定列宽为止（不可以搭配使用“-”）
                空格	        输出值为正时加上空格，为负时加上负号
    #           井号            type是o、x、X时，增加前缀0、0x、0X,type是e、E、f、g、G时，一定使用小数点,type是g、G时，尾部的0保留

width 用于控制显示数值的宽度，取值和含义如下：
    n(n=1,2,3,4,5,6...)： 宽度至少为n位，不够以空格填充。

prec 用于控制小数点后面的位数，取值和含义如下：
    无按缺省精度显示0
    当type=d,i,o,u,x时，没有影响；
    type=e,E,f时，不显示小数点
    n(n=1,2,3...)
    当type=e,E,f时表示的最大小数位数；
    type=其他，表示显示的最大宽度
    prec是指可选的精度。精度是一个 ．（点）后跟十进制数字字符串。如果没有给出精度，按 0（零）对待。精度指定：
        * d、o、i、 u、x 或 X 转换的最少数字显示位数。
        * e 和 f 转换的基数字符后的最少数字显示位数。
        * g 转换的最大有效数字位数。
        * s 转换中字符串的最大打印字节数目。

F|N|h|l 表示指针是否是远指针或整数是否是长整数
    F 远指针
    N 近指针
    h 短整数(short int)
    l 长整数(long int) （此处如果与d搭配为%lld则为long long int（C99），与f搭配为%llf则为long double（C99））