
ASM 汇编

1,info

2,组成
    汇编指令: 有对应的机器码的指令，可以被编译为机器指令，最终为CPU 所执行。
    伪指令/伪操作/宏指令: 没有对应的机器指令，不生成目标代码, 最终不被CPU所执行，它只是用来告诉编译器进行相关的编译工作。
    语法

3, 语法
    ;   //";"(分号)表示注释
    标号: 标识某段指令，区分大小写，format: 标号: ...

4, 常用汇编指令
    # 指令由操作码和操作数组成
    * 实际开发中须参考具体 芯片/编译器 手册
    寻址方式
        立即寻址: 指令操作数域直接给出参与运算的数值。
        直接寻址: 指令操作数域给出参与运算的数的地址。
        简接寻址: 采用R0或R1前加"@"表示，R0或R1存放操作数的地址。
        寄存器寻址: 对选定的寄存器(工作寄存器R0-R7,累加器A,通用寄存器B,地址寄存器,进位C)中的数值进行操作。
        相对寻址: 将程序计数器PC中的值(基地址)与指令第二字节给出的数相加，结果作为转移指令的转移地址。
        变址寻址: 指令操作数指定一个存放变址基址的变址寄存器(程序计数器PC、地址寄存器DPTR)，偏移量与基址相加结果作为操作数的地址。
        位寻址: 对一些内部RAM及特殊寄存器按位操作。
    数据传送:
        MOV data1,data2         // 将第二操作数的值存入第一操作数内,
        MOVC data1,data2        // 变址移入累加器A
        MOVX data1,data2        // 扩展RAM传值
        PUSH data               // 入栈
        POP data                // 出栈
    算术运算:
        ADD data1,data2         // 将第二操作数的值 与累加器A的数值 相加
        ADDC data1,data2        // 将第二操作数的值 与累加器A的数值 带进位相加
        SUBB data1,data2        // 将第二操作数的值 与累加器A的数值 带进位相减
        INC data1,data2         // 操作数的值自加一
        DEC data1,data2         // 操作数的值自减一
        MUL data1,data2         // data1乘以data2
        DIV data1,data2         // data1除以data2
    逻辑运算:
        ANL data1,data2         // 将第二操作数的值 与第一操作数的数值 相"与"
        ORL data1,data2         // 将第二操作数的值 与第一操作数的数值 相"或"
        XRL data1,data2         // 将第二操作数的值 与第一操作数的数值 相"异或"
        RL data1                // data1 循环左移
        RR data1                // data1 循环右移
        RLC data1               // data1 带进位循环左移
        RRC data1               // data1 带进位循环右移
        SWAP data1              // data1 半字节交换
    转移控制:
        ACALL addr11            // 绝对 短调用 子程序
        LCALL addr16            //      长调用 子程序
        RET                     // 子程序 返回
        RETI                    // 中断程序 返回
        AJMP addr11             // 绝对 短转移
        LJMP addr16             //      长转移
        SJMP addr               //    相对转移
        JMP @A+DPTR             //    相对DPTR间接转移
        JZ addr                 // 累加器为零转移
        JNZ addr                // 累加器非零转移
        JC addr                 // 进位为1转移
        JNC addr                // 进位为0转移
        JB bit,addr             // 直接地址位为1转移
        JNB bit,addr            // 直接地址位为0转移
        JBC bit,addr            // 直接地址位为1转移,该位清零
        CJNE data1,data2,addr   // 第一操作数的值 与 第二操作数的值 不相等转移
        DJNZ data1,addr         // 第一操作数的值减一，非零转移
        NOP                     // 空操作

5, 常用伪指令
    # "[]"内容表示可选或可忽略
    * 实际开发中须参考具体 芯片/编译器 手册
    EQU         // Equate，标号赋值指令，format: (标号) EQU (操作数) ,
                    e.g: P4 EQU 070H         ; 记P4的值为70
    ORG         // Origin，告诉编译器下一条汇编语句的偏移地址，format: ORG (操作数/标号) ,
                    e.g: ORG 0070H           ; 此后目标代码存储在存储器中以0x0070H开始的地址空间中。
    DB          // Define Byte, 把字节常数或字节串存放至内存连续的地址空间中，format: (标号) DB (字节常数或字符或表达式) ,
                    e.g: DATA1 DB 43H,09H,08H ;
    DW          // Define Word,
    END         // 指示汇编语言程序段结束, format: [标号:] END [地址或标号],
                    e.g: END                 ; END后面的语句将不再被汇编
    AREA        // 定义段，format: AREA (段名)[,(段类型)][,(读写属性)]...
                    段类型: CODE(包含机器指令,默认值为READONLY), DATA(包含数据但不包含指令,默认值为READWRITE)
                    读写属性: READONLY(指示此节只读。代码区域默认值), READWRITE(指示此节可读可写。数据区域默认值)
                    e.g:    AREA  Example,  DATA, READWRITE
    PUBLIC      // 表明当前模块中可被其他模块所引用的公共标识符。汇编语言中通过伪指令PUBLIC及EXTRN来解决模块之间的联系。
                    format: PUBLIC 标识符1,标识符2...
                    e.g: PUBLIC     _STARTUP    ; 声明标识符_STARTUP可被其他模块所引用。
    EXTRN或EXTERN    // 表明标识符1、2是外部标识符
                    format: EXTRN      标识符1:类型1,标识符2:类型2...
                    e.g:
    PROC和ENDP  // 此指令为过程定义指令，和ENDP成对出现。过程即子程序，一个过程可以被其他程序调用（CALL指令）。
                    format: <过程名> PROC [类型] ... ENDP
    SPACE       // 此指令用于分配一片连续的存储区域并初始化为0。表达式为要分配的字节数。SPACE可用“%”来代替。
                    format: 标号 SPACE 表达式
                    e.g: DataSpace SPACE 1000                ; 分配连续1000个字节的存储单元DataSpace并初始化为0。
    ENTRY       // 此指令用于声明程序的入口点。一个程序至少有一个入口点。
                    format: ENTRY
                    e.g: ENTRY               ; 程序入口点。
    PRESERVE8   // 指定当前文件需保持堆栈八字节对齐方式。其通过设置PRES8编译属性通知连接器。
                    format: PRESERVE8 [bool]
                    e.g:  PRESERVE8 {FALSE}     ; 不保持代码堆栈八字节对齐。
    CODE16、CODE32   // CODE16通知编译器，其后的指令序列为16位的Thumb指令。 CODE32通知编译器，其后的指令序列为32位的ARM指令。
                    format: CODE16
    IMPORT      // 此指令类似于EXTERN。用于通知编译器即将使用的标号在其他源文件中定义。无论当前源文件是否引用该标号，该
                    标号均会被加入到当前源文件的符号表中。
                    format:  IMPORT 标号 {[WEAK]}     // [WEAK]表示当所有源文件中均找不到此标号时，编译器也不会显示错误信息。
                    e.g: IMPORT Main                 ; 通知编译器当前文件要引用标号Main,但其定义在其他源文件中。
    GBLA        // 定义全局符号，
                    e.g: GBLA testval
    SETA        // 对全局算术符号进行赋值，
                    e.g: testval SETA 9
    DCD         // 在编译时为整数分配字存储空间，
    DCB         // 在编译时为数分配字节存储空间
    IF、ELSE、ENDIF   // 相当于C语言的条件编译
                    e.g: testval SETA 9